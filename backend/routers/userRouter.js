import express from 'express';
import data from '../data.js'; 
import User from '../models/userModel.js';
import expressAsyncHandler from 'express-async-handler'; //https://www.npmjs.com/package/express-async-handler
import bcrypt from 'bcryptjs';
import { generateToken} from '../utils.js';

const userRouter = express.Router(); //express 4
//Simple middleware for handling exceptions inside of async express routes and passing them to your express error handlers
userRouter.get('/seed', expressAsyncHandler(async (req, res) => {
    //await User.remove({}); //remove all users to prevent duplicate errors
    const createdUsers = await User.insertMany(data.users); //insert object of array in User collection from backend
    res.send({createdUsers});
}));

userRouter.post('/signin', expressAsyncHandler(async (req, res) => {
    //https://mongoosejs.com/docs/api/model.html#model_Model.findOne
    const user = await User.findOne({email: req.body.email}); //find only one record; no need save() cuz no new user created
    if (user) {
        if (bcrypt.compareSync(req.body.password, user.password)) { //entered compared to hashed pw
            res.send({
                _id: user._id,
                name: user.name,
                email: user.email,
                isAdmin: user.isAdmin,
                token: generateToken(user), //generated by JSON Web Token, unique identifier for a specific user
            });
            return;
        }
    }
    res.status(401).send({message: 'Invalid email or password'}); //Unauthorized client error status response code
}));

userRouter.post('/register', expressAsyncHandler(async (req, res) => { //use post() when data can be entered from frontend
    const user = new User({
        name: req.body.name,
        email: req.body.email,
        password: bcrypt.hashSync(req.body.password, 8)
    });
    const createdUser = await user.save(); //save() new users when post
    res.send({ //send back to frontend as route '/api/orders/register'
        _id: createdUser._id,
        name: createdUser.name,
        email: createdUser.email,
        isAdmin: createdUser.isAdmin,
        token: generateToken(createdUser),
    })
}));

export default userRouter;
