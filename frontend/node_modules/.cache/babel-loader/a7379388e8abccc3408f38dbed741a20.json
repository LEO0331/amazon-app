{"ast":null,"code":"var _jsxFileName = \"/Users/chenlicheng/Desktop/Ecommerce/frontend/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { detailsUser, updateUser } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UserEditScreen(props) {\n  _s();\n\n  const userId = props.match.params.id;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isSeller, setIsSeller] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const userDetails = useSelector(state => state.userDetails); //prefilled with user details\n\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      props.history.push('/userlist');\n    }\n\n    if (!user) {\n      dispatch(detailsUser(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setIsSeller(user.isSeller);\n      setIsAdmin(user.isAdmin);\n    }\n  }, [dispatch, props.history, successUpdate, user, userId]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateUser({\n      _id: userId,\n      name,\n      email,\n      isSeller,\n      isAdmin\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Edit User \", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 39\n        }, this), errorUpdate && /*#__PURE__*/_jsxDEV(MessageBox, {\n          variant: \"danger\",\n          children: errorUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 30\n      }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isSeller\",\n            children: \"Is Seller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"isSeller\",\n            checked: isSeller,\n            onChange: e => setIsSeller(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isAdmin\",\n            children: \"Is Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"isAdmin\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserEditScreen, \"HPfGkhUEbkz9cw+wo2XAk+ljldM=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/Users/chenlicheng/Desktop/Ecommerce/frontend/src/screens/UserEditScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","detailsUser","updateUser","USER_UPDATE_RESET","LoadingBox","MessageBox","UserEditScreen","props","userId","match","params","id","name","setName","email","setEmail","isSeller","setIsSeller","isAdmin","setIsAdmin","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","dispatch","type","history","push","submitHandler","e","preventDefault","_id","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { detailsUser, updateUser } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\n\nfunction UserEditScreen(props) {\n    const userId = props.match.params.id;\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [isSeller, setIsSeller] = useState(false);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const userDetails = useSelector(state => state.userDetails); //prefilled with user details\n    const { loading, error, user } = userDetails;\n    const userUpdate = useSelector(state => state.userUpdate);\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = userUpdate;\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (successUpdate) {\n            dispatch({ type: USER_UPDATE_RESET });\n            props.history.push('/userlist');\n        }\n        if (!user) {\n            dispatch(detailsUser(userId));\n        } else {\n            setName(user.name);\n            setEmail(user.email);\n            setIsSeller(user.isSeller);\n            setIsAdmin(user.isAdmin);\n        }\n    }, [dispatch, props.history, successUpdate, user, userId]);\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(updateUser({ _id: userId, name, email, isSeller, isAdmin }));\n    };\n    return (\n        <div>\n            <form className=\"form\" onSubmit={submitHandler}>\n                <div>\n                    <h1>Edit User {name}</h1>\n                    {loadingUpdate && <LoadingBox />}\n                    {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>}\n                </div>\n                {loading ? ( <LoadingBox />\n                ) : error ? ( <MessageBox variant=\"danger\">{error}</MessageBox>\n                ) : (\n                    <>\n                        <div>\n                            <label htmlFor=\"name\">Name</label>\n                            <input type=\"text\" id=\"name\" placeholder=\"Enter name\" value={name} onChange={e => setName(e.target.value)} />\n                        </div>\n                        <div>\n                            <label htmlFor=\"email\">Email</label>\n                            <input type=\"email\" id=\"email\" placeholder=\"Enter email\" value={email} onChange={e => setEmail(e.target.value)} />\n                        </div>\n                        <div>\n                            <label htmlFor=\"isSeller\">Is Seller</label>\n                            <input type=\"checkbox\" id=\"isSeller\" checked={isSeller} onChange={e => setIsSeller(e.target.checked)} />\n                        </div>\n                        <div>\n                            <label htmlFor=\"isAdmin\">Is Admin</label>\n                            <input type=\"checkbox\" id=\"isAdmin\" checked={isAdmin} onChange={e => setIsAdmin(e.target.checked)} />\n                        </div>\n                        <div>\n                            <button type=\"submit\" className=\"primary\">Update</button>\n                        </div>\n                    </>\n                )}\n            </form>\n        </div>\n    )\n}\n\nexport default UserEditScreen;\n"]},"metadata":{},"sourceType":"module"}