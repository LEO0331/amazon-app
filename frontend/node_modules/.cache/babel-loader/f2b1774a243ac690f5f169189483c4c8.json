{"ast":null,"code":"var _jsxFileName = \"/Users/chenlicheng/Desktop/Ecommerce/frontend/src/screens/SupportScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client'; //https://www.npmjs.com/package/socket.io-client\n\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\n\nfunction SupportScreen() {\n  _s();\n\n  const [selectedUser, setSelectedUser] = useState({});\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null); //https://reactjs.org/docs/hooks-reference.html#useref\n\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const userSignin = useSelector(state => state.userSignin);\n  const {\n    userInfo\n  } = userSignin;\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    if (!socket) {\n      const sk = socketIOClient(ENDPOINT);\n      setSocket(sk);\n      sk.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        isAdmin: userInfo.isAdmin\n      });\n      sk.on('message', data => {\n        if (allSelectedUser._id === data._id) {\n          allMessages = [...allMessages, data];\n        } else {\n          const existUser = allUsers.find(user => user._id === data._id);\n\n          if (existUser) {\n            allUsers = allUsers.map(user => user._id === existUser._id ? { ...user,\n              unread: true\n            } : user);\n            setUsers(allUsers);\n          }\n        }\n\n        setMessages(allMessages);\n      });\n      sk.on('updateUser', updatedUser => {\n        const existUser = allUsers.find(user => user._id === updatedUser._id);\n\n        if (existUser) {\n          allUsers = allUsers.map(user => user._id === existUser._id ? updatedUser : user);\n          setUsers(allUsers);\n        } else {\n          allUsers = [...allUsers, updatedUser];\n          setUsers(allUsers);\n        }\n      });\n      sk.on('listUsers', updatedUsers => {\n        allUsers = updatedUsers;\n        setUsers(allUsers);\n      });\n      sk.on('selectUser', user => {\n        allMessages = user.messages;\n        setMessages(allMessages);\n      });\n    }\n  }, [messages, socket, userInfo._id, userInfo.isAdmin, userInfo.name, users]);\n\n  const selectUser = user => {\n    allSelectedUser = user;\n    setSelectedUser(allSelectedUser);\n    const existUser = allUsers.find(x => x._id === user._id);\n\n    if (existUser) {\n      allUsers = allUsers.map(x => x._id === existUser._id ? { ...x,\n        unread: false\n      } : x);\n      setUsers(allUsers);\n    }\n\n    socket.emit('onUserSelected', user);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      allMessages = [...allMessages, {\n        body: messageBody,\n        name: userInfo.name\n      }];\n      setMessages(allMessages);\n      setMessageBody(''); //clear\n\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          isAdmin: userInfo.isAdmin,\n          _id: selectedUser._id\n        });\n      }, 1000); //1 sec timeout\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row top full-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-1 support-users\",\n      children: [users.filter(x => x._id !== userInfo._id).length === 0 && /*#__PURE__*/_jsxDEV(MessageBox, {\n        children: \"No Online User Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: users.filter(x => x._id !== userInfo._id).map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: user._id === selectedUser._id ? '  selected' : '  ',\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"block\",\n            type: \"button\",\n            onClick: () => selectUser(user),\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: user.unread ? 'unread' : user.online ? 'online' : 'offline'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this)]\n        }, user._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3 support-messages\",\n      children: !selectedUser._id ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        children: \"Select a user to start chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Chat with \", selectedUser.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          ref: uiMessagesRef,\n          children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No message.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 59\n          }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: `${msg.name}: `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 53\n            }, this), \" \", msg.body]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: submitHandler,\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              value: messageBody,\n              onChange: e => setMessageBody(e.target.value),\n              type: \"text\",\n              placeholder: \"please type message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SupportScreen, \"BHpZw9mClwtoU7ADQuL2UqU7b7I=\", false, function () {\n  return [useSelector];\n});\n\n_c = SupportScreen;\nexport default SupportScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SupportScreen\");","map":{"version":3,"sources":["/Users/chenlicheng/Desktop/Ecommerce/frontend/src/screens/SupportScreen.js"],"names":["React","useEffect","useRef","useState","socketIOClient","useSelector","MessageBox","allUsers","allMessages","allSelectedUser","ENDPOINT","window","location","host","indexOf","SupportScreen","selectedUser","setSelectedUser","socket","setSocket","uiMessagesRef","messageBody","setMessageBody","messages","setMessages","users","setUsers","userSignin","state","userInfo","current","scrollBy","top","clientHeight","left","behavior","sk","emit","_id","name","isAdmin","on","data","existUser","find","user","map","unread","updatedUser","updatedUsers","selectUser","x","submitHandler","e","preventDefault","trim","alert","body","setTimeout","filter","length","online","msg","index","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client'; //https://www.npmjs.com/package/socket.io-client\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox';\n\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\n\nfunction SupportScreen() {\n    const [selectedUser, setSelectedUser] = useState({});\n    const [socket, setSocket] = useState(null);\n    const uiMessagesRef = useRef(null); //https://reactjs.org/docs/hooks-reference.html#useref\n    const [messageBody, setMessageBody] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [users, setUsers] = useState([]);\n    const userSignin = useSelector(state => state.userSignin);\n    const { userInfo } = userSignin;\n    useEffect(() => {\n        if (uiMessagesRef.current) {\n            uiMessagesRef.current.scrollBy({\n                top: uiMessagesRef.current.clientHeight,\n                left: 0,\n                behavior: 'smooth'\n            });\n        }\n\n        if (!socket) {\n            const sk = socketIOClient(ENDPOINT);\n            setSocket(sk);\n            sk.emit('onLogin', {\n                _id: userInfo._id,\n                name: userInfo.name,\n                isAdmin: userInfo.isAdmin,\n            });\n            sk.on('message', data => {\n                if (allSelectedUser._id === data._id) {\n                    allMessages = [...allMessages, data];\n                } else {\n                    const existUser = allUsers.find(user => user._id === data._id);\n                    if (existUser) {\n                        allUsers = allUsers.map(user =>\n                            user._id === existUser._id ? { ...user, unread: true } : user\n                        );\n                        setUsers(allUsers);\n                    }\n                }\n                setMessages(allMessages);\n            });\n            sk.on('updateUser', (updatedUser) => {\n                const existUser = allUsers.find(user => user._id === updatedUser._id);\n                if (existUser) {\n                    allUsers = allUsers.map(user =>\n                        user._id === existUser._id ? updatedUser : user\n                );\n                setUsers(allUsers);\n                } else {\n                    allUsers = [...allUsers, updatedUser];\n                    setUsers(allUsers);\n                }\n            });\n            sk.on('listUsers', updatedUsers => {\n                allUsers = updatedUsers;\n                setUsers(allUsers);\n            });\n            sk.on('selectUser', user => {\n                allMessages = user.messages;\n                setMessages(allMessages);\n            });\n        }\n    }, [messages, socket, userInfo._id, userInfo.isAdmin, userInfo.name, users]);\n\n    const selectUser = user => {\n        allSelectedUser = user;\n        setSelectedUser(allSelectedUser);\n        const existUser = allUsers.find(x => x._id === user._id);\n        if (existUser) {\n            allUsers = allUsers.map(x =>\n                x._id === existUser._id ? { ...x, unread: false } : x\n            );\n            setUsers(allUsers);\n        }\n        socket.emit('onUserSelected', user);\n    };\n\n    const submitHandler = e => {\n        e.preventDefault();\n        if (!messageBody.trim()) {\n            alert('Error. Please type message.');\n        } else {\n            allMessages = [\n                ...allMessages,\n                { body: messageBody, name: userInfo.name },\n            ];\n            setMessages(allMessages);\n            setMessageBody(''); //clear\n            setTimeout(() => {\n                socket.emit('onMessage', {\n                    body: messageBody,\n                    name: userInfo.name,\n                    isAdmin: userInfo.isAdmin,\n                    _id: selectedUser._id,\n                });\n            }, 1000); //1 sec timeout\n        }\n    };\n\n    return (\n        <div className=\"row top full-container\">\n            <div className=\"col-1 support-users\">\n                {users.filter(x => x._id !== userInfo._id).length === 0 && (\n                <MessageBox>No Online User Found</MessageBox>\n                )}\n                <ul>\n                    {users.filter(x => x._id !== userInfo._id).map(user => (\n                        <li key={user._id} className={user._id === selectedUser._id ? '  selected' : '  '}>\n                            <button className=\"block\" type=\"button\" onClick={() => selectUser(user)}>{user.name}</button>\n                            <span className={user.unread ? 'unread' : user.online ? 'online' : 'offline'} />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"col-3 support-messages\">\n                {!selectedUser._id ? (\n                    <MessageBox>Select a user to start chat</MessageBox>\n                ) : (\n                    <div>\n                        <div className=\"row\">\n                        <strong>Chat with {selectedUser.name} </strong>\n                        </div>\n                            <ul ref={uiMessagesRef}>\n                                {messages.length === 0 && <li>No message.</li>}\n                                {messages.map((msg, index) => (\n                                    <li key={index}><strong>{`${msg.name}: `}</strong> {msg.body}</li>\n                                ))}\n                            </ul>\n                        <div>\n                            <form onSubmit={submitHandler} className=\"row\">\n                                <input value={messageBody} onChange={e => setMessageBody(e.target.value)} type=\"text\" placeholder=\"please type message\"/>\n                                <button type=\"submit\">Send</button>\n                            </form>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default SupportScreen;\n"]},"metadata":{},"sourceType":"module"}