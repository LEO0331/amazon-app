{"ast":null,"code":"var _jsxFileName = \"/Users/chenlicheng/Desktop/Ecommerce/frontend/src/screens/MapScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react'; //https://www.npmjs.com/package/@react-google-maps/api\n\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libs = ['places'];\nconst defaultLocation = {\n  lat: -34.921230,\n  lng: 138.599503\n}; //enable Billing on the Google Cloud Project at https://console.cloud.google.com/project/_/billing/enable\n\nfunction MapScreen(props) {\n  _s();\n\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const dispatch = useDispatch();\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      dispatch({\n        // dispatch select action\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('Successfully Selected Location');\n      props.history.push('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation is not supported by this browser');\n    } else {\n      //get current location and auto set position\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-container\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"smaple-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 20,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-input-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"primary\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MapScreen, \"FvQoWY5xbeizQachYmSbuS4Mpc8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MapScreen;\nexport default MapScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"sources":["/Users/chenlicheng/Desktop/Ecommerce/frontend/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","LoadingBox","axios","USER_ADDRESS_MAP_CONFIRM","useDispatch","libs","defaultLocation","lat","lng","MapScreen","props","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","history","push","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAA4D;;AAC5D,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,mBAAhC,EAAqDC,MAArD,QAAmE,wBAAnE;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,IAAI,GAAG,CAAC,QAAD,CAAb;AACA,MAAMC,eAAe,GAAG;AAAEC,EAAAA,GAAG,EAAE,CAAC,SAAR;AAAmBC,EAAAA,GAAG,EAAE;AAAxB,CAAxB,C,CACA;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAACU,eAAD,CAApC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAACiB,MAAD,CAAxC;AACA,QAAMI,MAAM,GAAGtB,MAAM,CAAC,IAAD,CAArB;AACA,QAAMuB,QAAQ,GAAGvB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMwB,SAAS,GAAGxB,MAAM,CAAC,IAAD,CAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0B,KAAK,GAAG,YAAY;AACtB,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMnB,KAAK,CAAC,oBAAD,CAA5B;AACAU,MAAAA,eAAe,CAACS,IAAD,CAAf;AACAC,MAAAA,sBAAsB;AACzB,KAJD;;AAKAF,IAAAA,KAAK;AACR,GAPQ,EAON,EAPM,CAAT;;AAQA,QAAMG,MAAM,GAAGC,GAAG,IAAI;AAClBP,IAAAA,MAAM,CAACQ,OAAP,GAAiBD,GAAjB;AACH,GAFD;;AAGA,QAAME,YAAY,GAAGC,MAAM,IAAI;AAC3BR,IAAAA,SAAS,CAACM,OAAV,GAAoBE,MAApB;AACH,GAFD;;AAGA,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1BX,IAAAA,QAAQ,CAACO,OAAT,GAAmBI,KAAnB;AACH,GAFD;;AAGA,QAAMC,MAAM,GAAG,MAAM;AACjBd,IAAAA,WAAW,CAAC;AAACT,MAAAA,GAAG,EAAEU,MAAM,CAACQ,OAAP,CAAeZ,MAAf,CAAsBN,GAAtB,EAAN;AAAmCC,MAAAA,GAAG,EAAES,MAAM,CAACQ,OAAP,CAAeZ,MAAf,CAAsBL,GAAtB;AAAxC,KAAD,CAAX;AACH,GAFD;;AAGA,QAAMuB,eAAe,GAAG,MAAM;AAC1B,UAAMF,KAAK,GAAGX,QAAQ,CAACO,OAAT,CAAiBO,SAAjB,GAA6B,CAA7B,EAAgCC,QAAhC,CAAyClB,QAAvD;AACAD,IAAAA,SAAS,CAAC;AAAEP,MAAAA,GAAG,EAAEsB,KAAK,CAACtB,GAAN,EAAP;AAAoBC,MAAAA,GAAG,EAAEqB,KAAK,CAACrB,GAAN;AAAzB,KAAD,CAAT;AACAQ,IAAAA,WAAW,CAAC;AAAET,MAAAA,GAAG,EAAEsB,KAAK,CAACtB,GAAN,EAAP;AAAoBC,MAAAA,GAAG,EAAEqB,KAAK,CAACrB,GAAN;AAAzB,KAAD,CAAX;AACH,GAJD;;AAKA,QAAM0B,QAAQ,GAAG9B,WAAW,EAA5B;;AACA,QAAM+B,SAAS,GAAG,MAAM;AACpB,UAAMC,MAAM,GAAGlB,QAAQ,CAACO,OAAT,CAAiBO,SAAjB,EAAf;;AACA,QAAII,MAAM,IAAIA,MAAM,CAACC,MAAP,KAAkB,CAAhC,EAAmC;AAC/BH,MAAAA,QAAQ,CAAC;AAAE;AACPI,QAAAA,IAAI,EAAEnC,wBADD;AAELoC,QAAAA,OAAO,EAAE;AACLhC,UAAAA,GAAG,EAAEQ,QAAQ,CAACR,GADT;AAELC,UAAAA,GAAG,EAAEO,QAAQ,CAACP,GAFT;AAGLgC,UAAAA,OAAO,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAUK,iBAHd;AAILC,UAAAA,IAAI,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUM,IAJX;AAKLC,UAAAA,QAAQ,EAAEP,MAAM,CAAC,CAAD,CAAN,CAAUO,QALf;AAMLC,UAAAA,eAAe,EAAER,MAAM,CAAC,CAAD,CAAN,CAAUS;AANtB;AAFJ,OAAD,CAAR;AAWAC,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACApC,MAAAA,KAAK,CAACqC,OAAN,CAAcC,IAAd,CAAmB,WAAnB;AACH,KAdD,MAcO;AACHF,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACH;AACJ,GAnBD;;AAoBA,QAAMxB,sBAAsB,GAAG,MAAM;AACjC,QAAI,CAAC2B,SAAS,CAACC,WAAf,EAA4B;AACxBJ,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACH,KAFD,MAEO;AAAE;AACLG,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAI;AACjDtC,QAAAA,SAAS,CAAC;AAACP,UAAAA,GAAG,EAAE6C,QAAQ,CAACC,MAAT,CAAgBC,QAAtB;AAAgC9C,UAAAA,GAAG,EAAE4C,QAAQ,CAACC,MAAT,CAAgBE;AAArD,SAAD,CAAT;AACAvC,QAAAA,WAAW,CAAC;AAACT,UAAAA,GAAG,EAAE6C,QAAQ,CAACC,MAAT,CAAgBC,QAAtB;AAAgC9C,UAAAA,GAAG,EAAE4C,QAAQ,CAACC,MAAT,CAAgBE;AAArD,SAAD,CAAX;AACH,OAHD;AAIH;AACJ,GATD;;AAUA,SAAO5C,YAAY,gBACf;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACI,QAAC,UAAD;AAAY,MAAA,SAAS,EAAEN,IAAvB;AAA6B,MAAA,gBAAgB,EAAEM,YAA/C;AAAA,6BACI,QAAC,SAAD;AACI,QAAA,EAAE,EAAC,YADP;AAEI,QAAA,iBAAiB,EAAE;AAAE6C,UAAAA,MAAM,EAAE,MAAV;AAAkBC,UAAAA,KAAK,EAAE;AAAzB,SAFvB;AAGI,QAAA,MAAM,EAAE5C,MAHZ;AAII,QAAA,IAAI,EAAE,EAJV;AAKI,QAAA,MAAM,EAAEU,MALZ;AAMI,QAAA,MAAM,EAAEO,MANZ;AAAA,gCAQI,QAAC,mBAAD;AAAqB,UAAA,MAAM,EAAEF,YAA7B;AAA2C,UAAA,eAAe,EAAEG,eAA5D;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,eAAf;AAAA,oCACI;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,SAAS,EAAC,SAAhC;AAA0C,cAAA,OAAO,EAAEI,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBARJ,eAcI,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEpB,QAAlB;AAA4B,UAAA,MAAM,EAAEW;AAApC;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADe,gBAsBf,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,UAtBJ;AAwBH;;GAvFQjB,S;UAgCYL,W;;;KAhCZK,S;AAyFT,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'; //https://www.npmjs.com/package/@react-google-maps/api\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\n\nconst libs = ['places'];\nconst defaultLocation = { lat: -34.921230, lng: 138.599503 };\n//enable Billing on the Google Cloud Project at https://console.cloud.google.com/project/_/billing/enable\nfunction MapScreen(props) {\n    const [googleApiKey, setGoogleApiKey] = useState('');\n    const [center, setCenter] = useState(defaultLocation);\n    const [location, setLocation] = useState(center);\n    const mapRef = useRef(null);\n    const placeRef = useRef(null);\n    const markerRef = useRef(null);\n    useEffect(() => {\n        const fetch = async () => {\n            const { data } = await axios('/api/config/google');\n            setGoogleApiKey(data);\n            getUserCurrentLocation();\n        };\n        fetch();\n    }, []);\n    const onLoad = map => {\n        mapRef.current = map;\n    };\n    const onMarkerLoad = marker => {\n        markerRef.current = marker;\n    };\n    const onLoadPlaces = place => {\n        placeRef.current = place;\n    };\n    const onIdle = () => {\n        setLocation({lat: mapRef.current.center.lat(), lng: mapRef.current.center.lng()});\n    };\n    const onPlacesChanged = () => {\n        const place = placeRef.current.getPlaces()[0].geometry.location;\n        setCenter({ lat: place.lat(), lng: place.lng() });\n        setLocation({ lat: place.lat(), lng: place.lng() });\n    };\n    const dispatch = useDispatch();\n    const onConfirm = () => {\n        const places = placeRef.current.getPlaces();\n        if (places && places.length === 1) {\n            dispatch({ // dispatch select action\n                type: USER_ADDRESS_MAP_CONFIRM,\n                payload: {\n                    lat: location.lat,\n                    lng: location.lng,\n                    address: places[0].formatted_address,\n                    name: places[0].name,\n                    vicinity: places[0].vicinity,\n                    googleAddressId: places[0].id\n                },\n            });\n            alert('Successfully Selected Location');\n            props.history.push('/shipping');\n        } else {\n            alert('Please enter your address');\n        }\n    };\n    const getUserCurrentLocation = () => {\n        if (!navigator.geolocation) {\n            alert('Geolocation is not supported by this browser');\n        } else { //get current location and auto set position\n            navigator.geolocation.getCurrentPosition(position => {\n                setCenter({lat: position.coords.latitude, lng: position.coords.longitude});\n                setLocation({lat: position.coords.latitude, lng: position.coords.longitude});\n            });\n        }\n    };\n    return googleApiKey ? (\n        <div className=\"full-container\">\n            <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n                <GoogleMap\n                    id=\"smaple-map\"\n                    mapContainerStyle={{ height: '100%', width: '100%' }}\n                    center={center}\n                    zoom={20}\n                    onLoad={onLoad}\n                    onIdle={onIdle}\n                >\n                    <StandaloneSearchBox onLoad={onLoadPlaces} onPlacesChanged={onPlacesChanged}>\n                        <div className=\"map-input-box\">\n                            <input type=\"text\" placeholder=\"Enter your address\" />\n                            <button type=\"button\" className=\"primary\" onClick={onConfirm}>Confirm</button>\n                        </div>\n                    </StandaloneSearchBox>\n                    <Marker position={location} onLoad={onMarkerLoad} />\n                </GoogleMap>\n            </LoadScript>\n        </div>\n    ) : (\n        <LoadingBox />\n    );\n}\n\nexport default MapScreen;\n"]},"metadata":{},"sourceType":"module"}