{"ast":null,"code":"import { CART_ADD_ITEM, CART_ADD_ITEM_FAIL, CART_EMPTY, CART_REMOVE_ITEM, CART_SAVE_PAYMENT_METHOD, CART_SAVE_SHIPPING_ADDRESS } from '../constants/cartConstants';\nexport const cartReducer = (state = {\n  cartItems: []\n}, action) => {\n  //error: ''\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload; //product: data._id; new item\n      //item already in the cart\n\n      const existItem = state.cartItems.find(x => x.product === item.product); //action.payload.product -> id\n\n      if (existItem) {\n        return { //only update changed item, others remain\n          ...state,\n          //current items\n          error: '',\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x) //only replace changed item\n\n        };\n      } else {\n        return { ...state,\n          error: '',\n          cartItems: [...state.cartItems, item]\n        }; //concat; push items into arr of onjects\n      }\n\n    case CART_REMOVE_ITEM:\n      return { //not change other properties of the cart object\n        ...state,\n        error: '',\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state,\n        shippingAddress: action.payload\n      };\n\n    case CART_SAVE_PAYMENT_METHOD:\n      return { ...state,\n        paymentMethod: action.payload\n      };\n\n    case CART_ADD_ITEM_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case CART_EMPTY:\n      return { ...state,\n        error: '',\n        cartItems: []\n      };\n\n    default:\n      return state;\n  }\n};\n/*\nconst index = state.cartItems.findIndex(x => x.product === item.product);\ncartItems: state.cartItems[index] = item\n*/","map":{"version":3,"sources":["/Users/chenlicheng/Desktop/Ecommerce/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_ADD_ITEM_FAIL","CART_EMPTY","CART_REMOVE_ITEM","CART_SAVE_PAYMENT_METHOD","CART_SAVE_SHIPPING_ADDRESS","cartReducer","state","cartItems","action","type","item","payload","existItem","find","x","product","error","map","filter","shippingAddress","paymentMethod"],"mappings":"AAAA,SACIA,aADJ,EAEIC,kBAFJ,EAGIC,UAHJ,EAIIC,gBAJJ,EAKIC,wBALJ,EAMIC,0BANJ,QAOO,4BAPP;AASA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAT,EAA4BC,MAA5B,KAAuC;AAAE;AAChE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,aAAL;AACI,YAAMW,IAAI,GAAGF,MAAM,CAACG,OAApB,CADJ,CACiC;AAC7B;;AACA,YAAMC,SAAS,GAAGN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA7C,CAAlB,CAHJ,CAG6E;;AACzE,UAAGH,SAAH,EAAa;AACT,eAAO,EAAE;AACL,aAAGN,KADA;AACO;AACVU,UAAAA,KAAK,EAAE,EAFJ;AAGHT,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAoBH,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CAAlE,CAHR,CAG6E;;AAH7E,SAAP;AAKH,OAND,MAMO;AACH,eAAO,EAAE,GAAGR,KAAL;AAAYU,UAAAA,KAAK,EAAE,EAAnB;AAAuBT,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBG,IAArB;AAAlC,SAAP,CADG,CACoE;AAC1E;;AACL,SAAKR,gBAAL;AACI,aAAO,EAAE;AACL,WAAGI,KADA;AAEHU,QAAAA,KAAK,EAAE,EAFJ;AAGHT,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAuBJ,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACG,OAAjD;AAHR,OAAP;;AAKA,SAAKP,0BAAL;AACI,aAAO,EAAE,GAAGE,KAAL;AAAYa,QAAAA,eAAe,EAAEX,MAAM,CAACG;AAApC,OAAP;;AACJ,SAAKR,wBAAL;AACI,aAAO,EAAE,GAAGG,KAAL;AAAYc,QAAAA,aAAa,EAAEZ,MAAM,CAACG;AAAlC,OAAP;;AACJ,SAAKX,kBAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYU,QAAAA,KAAK,EAAER,MAAM,CAACG;AAA1B,OAAP;;AACJ,SAAKV,UAAL;AACI,aAAO,EAAE,GAAGK,KAAL;AAAYU,QAAAA,KAAK,EAAE,EAAnB;AAAuBT,QAAAA,SAAS,EAAE;AAAlC,OAAP;;AACR;AACI,aAAOD,KAAP;AA7BR;AA+BH,CAhCM;AAmCP;AACA;AACA;AACA","sourcesContent":["import {\n    CART_ADD_ITEM,\n    CART_ADD_ITEM_FAIL,\n    CART_EMPTY,\n    CART_REMOVE_ITEM,\n    CART_SAVE_PAYMENT_METHOD,\n    CART_SAVE_SHIPPING_ADDRESS,\n} from '../constants/cartConstants';\n\nexport const cartReducer = (state = { cartItems: [] }, action) => { //error: ''\n    switch (action.type){\n        case CART_ADD_ITEM:\n            const item = action.payload; //product: data._id; new item\n            //item already in the cart\n            const existItem = state.cartItems.find(x => x.product === item.product); //action.payload.product -> id\n            if(existItem){\n                return { //only update changed item, others remain\n                    ...state, //current items\n                    error: '',\n                    cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x) //only replace changed item\n                };\n            } else {\n                return { ...state, error: '', cartItems: [...state.cartItems, item] }; //concat; push items into arr of onjects\n            }\n        case CART_REMOVE_ITEM:\n            return { //not change other properties of the cart object\n                ...state,\n                error: '',\n                cartItems: state.cartItems.filter(x => x.product !== action.payload)\n            };\n            case CART_SAVE_SHIPPING_ADDRESS:\n                return { ...state, shippingAddress: action.payload };\n            case CART_SAVE_PAYMENT_METHOD:\n                return { ...state, paymentMethod: action.payload };\n            case CART_ADD_ITEM_FAIL:\n                return { ...state, error: action.payload };\n            case CART_EMPTY:\n                return { ...state, error: '', cartItems: [] };\n        default:\n            return state;\n    }\n};\n\n\n/*\nconst index = state.cartItems.findIndex(x => x.product === item.product);\ncartItems: state.cartItems[index] = item\n*/\n"]},"metadata":{},"sourceType":"module"}